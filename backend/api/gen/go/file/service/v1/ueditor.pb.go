// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: file/service/v1/ueditor.proto

package servicev1

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 动作
type UEditorAction int32

const (
	UEditorAction_config       UEditorAction = 0  // 配置
	UEditorAction_listFile     UEditorAction = 1  // 文件
	UEditorAction_listImage    UEditorAction = 2  // 图片
	UEditorAction_uploadFile   UEditorAction = 10 // 文件
	UEditorAction_uploadImage  UEditorAction = 11 // 图片
	UEditorAction_uploadVideo  UEditorAction = 12 // 视频
	UEditorAction_uploadScrawl UEditorAction = 13 // 涂鸦图片
	UEditorAction_catchImage   UEditorAction = 14 // 抓取远程图片
)

// Enum value maps for UEditorAction.
var (
	UEditorAction_name = map[int32]string{
		0:  "config",
		1:  "listFile",
		2:  "listImage",
		10: "uploadFile",
		11: "uploadImage",
		12: "uploadVideo",
		13: "uploadScrawl",
		14: "catchImage",
	}
	UEditorAction_value = map[string]int32{
		"config":       0,
		"listFile":     1,
		"listImage":    2,
		"uploadFile":   10,
		"uploadImage":  11,
		"uploadVideo":  12,
		"uploadScrawl": 13,
		"catchImage":   14,
	}
)

func (x UEditorAction) Enum() *UEditorAction {
	p := new(UEditorAction)
	*p = x
	return p
}

func (x UEditorAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UEditorAction) Descriptor() protoreflect.EnumDescriptor {
	return file_file_service_v1_ueditor_proto_enumTypes[0].Descriptor()
}

func (UEditorAction) Type() protoreflect.EnumType {
	return &file_file_service_v1_ueditor_proto_enumTypes[0]
}

func (x UEditorAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UEditorAction.Descriptor instead.
func (UEditorAction) EnumDescriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{0}
}

type UEditorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        string                 `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Encode        string                 `protobuf:"bytes,2,opt,name=encode,proto3" json:"encode,omitempty"`
	Start         int32                  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	Size          int32                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UEditorRequest) Reset() {
	*x = UEditorRequest{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorRequest) ProtoMessage() {}

func (x *UEditorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorRequest.ProtoReflect.Descriptor instead.
func (*UEditorRequest) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{0}
}

func (x *UEditorRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *UEditorRequest) GetEncode() string {
	if x != nil {
		return x.Encode
	}
	return ""
}

func (x *UEditorRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *UEditorRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type UEditorResponse struct {
	state                   protoimpl.MessageState         `protogen:"open.v1"`
	ImageActionName         *string                        `protobuf:"bytes,1,opt,name=imageActionName,proto3,oneof" json:"imageActionName,omitempty"`                  // 执行上传图片的action名称
	ImageFieldName          *string                        `protobuf:"bytes,2,opt,name=imageFieldName,proto3,oneof" json:"imageFieldName,omitempty"`                    // 提交的图片表单名称
	ImageMaxSize            *int64                         `protobuf:"varint,3,opt,name=imageMaxSize,proto3,oneof" json:"imageMaxSize,omitempty"`                       // 上传大小限制，单位B
	ImageAllowFiles         []string                       `protobuf:"bytes,4,rep,name=imageAllowFiles,proto3" json:"imageAllowFiles,omitempty"`                        // 上传图片格式显示
	ImageCompressEnable     *bool                          `protobuf:"varint,5,opt,name=imageCompressEnable,proto3,oneof" json:"imageCompressEnable,omitempty"`         // 是否压缩图片,默认是true
	ImageCompressBorder     *int64                         `protobuf:"varint,6,opt,name=imageCompressBorder,proto3,oneof" json:"imageCompressBorder,omitempty"`         // 图片压缩最长边限制
	ImageInsertAlign        *string                        `protobuf:"bytes,7,opt,name=imageInsertAlign,proto3,oneof" json:"imageInsertAlign,omitempty"`                // 插入的图片浮动方式
	ImageUrlPrefix          *string                        `protobuf:"bytes,8,opt,name=imageUrlPrefix,proto3,oneof" json:"imageUrlPrefix,omitempty"`                    // 图片访问路径前缀
	ImagePathFormat         *string                        `protobuf:"bytes,9,opt,name=imagePathFormat,proto3,oneof" json:"imagePathFormat,omitempty"`                  // 上传保存路径,可以自定义保存路径和文件名格式
	ScrawlActionName        *string                        `protobuf:"bytes,10,opt,name=scrawlActionName,proto3,oneof" json:"scrawlActionName,omitempty"`               // 执行上传涂鸦的action名称
	ScrawlFieldName         *string                        `protobuf:"bytes,11,opt,name=scrawlFieldName,proto3,oneof" json:"scrawlFieldName,omitempty"`                 // 提交的图片表单名称
	ScrawlMaxSize           *int64                         `protobuf:"varint,12,opt,name=scrawlMaxSize,proto3,oneof" json:"scrawlMaxSize,omitempty"`                    // 上传大小限制，单位B
	ScrawlUrlPrefix         *string                        `protobuf:"bytes,13,opt,name=scrawlUrlPrefix,proto3,oneof" json:"scrawlUrlPrefix,omitempty"`                 // 图片访问路径前缀
	ScrawlInsertAlign       *string                        `protobuf:"bytes,14,opt,name=scrawlInsertAlign,proto3,oneof" json:"scrawlInsertAlign,omitempty"`             //
	ScrawlPathFormat        *string                        `protobuf:"bytes,15,opt,name=scrawlPathFormat,proto3,oneof" json:"scrawlPathFormat,omitempty"`               // 上传保存路径,可以自定义保存路径和文件名格式
	SnapscreenActionName    *string                        `protobuf:"bytes,20,opt,name=snapscreenActionName,proto3,oneof" json:"snapscreenActionName,omitempty"`       // 执行上传截图的action名称
	SnapscreenUrlPrefix     *string                        `protobuf:"bytes,21,opt,name=snapscreenUrlPrefix,proto3,oneof" json:"snapscreenUrlPrefix,omitempty"`         // 图片访问路径前缀
	SnapscreenInsertAlign   *string                        `protobuf:"bytes,22,opt,name=snapscreenInsertAlign,proto3,oneof" json:"snapscreenInsertAlign,omitempty"`     // 插入的图片浮动方式
	SnapscreenPathFormat    *string                        `protobuf:"bytes,23,opt,name=snapscreenPathFormat,proto3,oneof" json:"snapscreenPathFormat,omitempty"`       // 上传保存路径,可以自定义保存路径和文件名格式
	CatcherActionName       *string                        `protobuf:"bytes,30,opt,name=catcherActionName,proto3,oneof" json:"catcherActionName,omitempty"`             // 执行抓取远程图片的action名称
	CatcherFieldName        *string                        `protobuf:"bytes,31,opt,name=catcherFieldName,proto3,oneof" json:"catcherFieldName,omitempty"`               // 提交的图片列表表单名称
	CatcherLocalDomain      []string                       `protobuf:"bytes,32,rep,name=catcherLocalDomain,proto3" json:"catcherLocalDomain,omitempty"`                 //
	CatcherUrlPrefix        *string                        `protobuf:"bytes,33,opt,name=catcherUrlPrefix,proto3,oneof" json:"catcherUrlPrefix,omitempty"`               // 图片访问路径前缀
	CatcherMaxSize          *int64                         `protobuf:"varint,34,opt,name=catcherMaxSize,proto3,oneof" json:"catcherMaxSize,omitempty"`                  // 上传大小限制，单位B
	CatcherAllowFiles       []string                       `protobuf:"bytes,35,rep,name=catcherAllowFiles,proto3" json:"catcherAllowFiles,omitempty"`                   // 列出的文件类型
	CatcherPathFormat       *string                        `protobuf:"bytes,36,opt,name=catcherPathFormat,proto3,oneof" json:"catcherPathFormat,omitempty"`             // 上传保存路径,可以自定义保存路径和文件名格式
	VideoActionName         *string                        `protobuf:"bytes,40,opt,name=videoActionName,proto3,oneof" json:"videoActionName,omitempty"`                 // 执行上传视频的action名称
	VideoFieldName          *string                        `protobuf:"bytes,41,opt,name=videoFieldName,proto3,oneof" json:"videoFieldName,omitempty"`                   // 提交的视频表单名称
	VideoUrlPrefix          *string                        `protobuf:"bytes,42,opt,name=videoUrlPrefix,proto3,oneof" json:"videoUrlPrefix,omitempty"`                   // 视频访问路径前缀
	VideoMaxSize            *int64                         `protobuf:"varint,43,opt,name=videoMaxSize,proto3,oneof" json:"videoMaxSize,omitempty"`                      // 上传大小限制，单位B，默认100MB
	VideoAllowFiles         []string                       `protobuf:"bytes,44,rep,name=videoAllowFiles,proto3" json:"videoAllowFiles,omitempty"`                       // 列出的文件类型
	VideoPathFormat         *string                        `protobuf:"bytes,45,opt,name=videoPathFormat,proto3,oneof" json:"videoPathFormat,omitempty"`                 // 上传保存路径,可以自定义保存路径和文件名格式
	FileActionName          *string                        `protobuf:"bytes,50,opt,name=fileActionName,proto3,oneof" json:"fileActionName,omitempty"`                   // 执行上传视频的action名称
	FileFieldName           *string                        `protobuf:"bytes,51,opt,name=fileFieldName,proto3,oneof" json:"fileFieldName,omitempty"`                     // 提交的文件表单名称
	FileUrlPrefix           *string                        `protobuf:"bytes,52,opt,name=fileUrlPrefix,proto3,oneof" json:"fileUrlPrefix,omitempty"`                     // 文件访问路径前缀
	FileMaxSize             *int64                         `protobuf:"varint,53,opt,name=fileMaxSize,proto3,oneof" json:"fileMaxSize,omitempty"`                        // 上传大小限制，单位B，默认50MB
	FileAllowFiles          []string                       `protobuf:"bytes,54,rep,name=fileAllowFiles,proto3" json:"fileAllowFiles,omitempty"`                         // 列出的文件类型
	FilePathFormat          *string                        `protobuf:"bytes,55,opt,name=filePathFormat,proto3,oneof" json:"filePathFormat,omitempty"`                   // 上传保存路径,可以自定义保存路径和文件名格式
	ImageManagerActionName  *string                        `protobuf:"bytes,60,opt,name=imageManagerActionName,proto3,oneof" json:"imageManagerActionName,omitempty"`   // 图片列表配置
	ImageManagerListSize    *int64                         `protobuf:"varint,61,opt,name=imageManagerListSize,proto3,oneof" json:"imageManagerListSize,omitempty"`      // 每次列出文件数量
	ImageManagerUrlPrefix   *string                        `protobuf:"bytes,62,opt,name=imageManagerUrlPrefix,proto3,oneof" json:"imageManagerUrlPrefix,omitempty"`     // 图片访问路径前缀
	ImageManagerInsertAlign *string                        `protobuf:"bytes,63,opt,name=imageManagerInsertAlign,proto3,oneof" json:"imageManagerInsertAlign,omitempty"` // 插入的图片浮动方式，默认值：none
	ImageManagerAllowFiles  []string                       `protobuf:"bytes,64,rep,name=imageManagerAllowFiles,proto3" json:"imageManagerAllowFiles,omitempty"`         // 列出的文件类型
	ImageManagerListPath    *string                        `protobuf:"bytes,65,opt,name=imageManagerListPath,proto3,oneof" json:"imageManagerListPath,omitempty"`       // 指定要列出图片的目录
	FileManagerActionName   *string                        `protobuf:"bytes,70,opt,name=fileManagerActionName,proto3,oneof" json:"fileManagerActionName,omitempty"`     // 文件列表配置
	FileManagerUrlPrefix    *string                        `protobuf:"bytes,71,opt,name=fileManagerUrlPrefix,proto3,oneof" json:"fileManagerUrlPrefix,omitempty"`       // 指定要列出文件的目录
	FileManagerListSize     *int64                         `protobuf:"varint,72,opt,name=fileManagerListSize,proto3,oneof" json:"fileManagerListSize,omitempty"`        // 每次列出文件数量
	FileManagerAllowFiles   []string                       `protobuf:"bytes,73,rep,name=fileManagerAllowFiles,proto3" json:"fileManagerAllowFiles,omitempty"`           // 列出的文件类型
	FileManagerListPath     *string                        `protobuf:"bytes,74,opt,name=FileManagerListPath,proto3,oneof" json:"FileManagerListPath,omitempty"`         // 列出的文件类型
	FormulaConfig           *UEditorResponse_FormulaConfig `protobuf:"bytes,80,opt,name=formulaConfig,proto3,oneof" json:"formulaConfig,omitempty"`                     // 公式配置
	State                   *string                        `protobuf:"bytes,100,opt,name=state,proto3,oneof" json:"state,omitempty"`                                    // 上传状态，上传成功时必须返回"SUCCESS"
	Start                   *int32                         `protobuf:"varint,101,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Total                   *int32                         `protobuf:"varint,102,opt,name=total,proto3,oneof" json:"total,omitempty"`
	List                    []*UEditorResponse_Item        `protobuf:"bytes,103,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UEditorResponse) Reset() {
	*x = UEditorResponse{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorResponse) ProtoMessage() {}

func (x *UEditorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorResponse.ProtoReflect.Descriptor instead.
func (*UEditorResponse) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{1}
}

func (x *UEditorResponse) GetImageActionName() string {
	if x != nil && x.ImageActionName != nil {
		return *x.ImageActionName
	}
	return ""
}

func (x *UEditorResponse) GetImageFieldName() string {
	if x != nil && x.ImageFieldName != nil {
		return *x.ImageFieldName
	}
	return ""
}

func (x *UEditorResponse) GetImageMaxSize() int64 {
	if x != nil && x.ImageMaxSize != nil {
		return *x.ImageMaxSize
	}
	return 0
}

func (x *UEditorResponse) GetImageAllowFiles() []string {
	if x != nil {
		return x.ImageAllowFiles
	}
	return nil
}

func (x *UEditorResponse) GetImageCompressEnable() bool {
	if x != nil && x.ImageCompressEnable != nil {
		return *x.ImageCompressEnable
	}
	return false
}

func (x *UEditorResponse) GetImageCompressBorder() int64 {
	if x != nil && x.ImageCompressBorder != nil {
		return *x.ImageCompressBorder
	}
	return 0
}

func (x *UEditorResponse) GetImageInsertAlign() string {
	if x != nil && x.ImageInsertAlign != nil {
		return *x.ImageInsertAlign
	}
	return ""
}

func (x *UEditorResponse) GetImageUrlPrefix() string {
	if x != nil && x.ImageUrlPrefix != nil {
		return *x.ImageUrlPrefix
	}
	return ""
}

func (x *UEditorResponse) GetImagePathFormat() string {
	if x != nil && x.ImagePathFormat != nil {
		return *x.ImagePathFormat
	}
	return ""
}

func (x *UEditorResponse) GetScrawlActionName() string {
	if x != nil && x.ScrawlActionName != nil {
		return *x.ScrawlActionName
	}
	return ""
}

func (x *UEditorResponse) GetScrawlFieldName() string {
	if x != nil && x.ScrawlFieldName != nil {
		return *x.ScrawlFieldName
	}
	return ""
}

func (x *UEditorResponse) GetScrawlMaxSize() int64 {
	if x != nil && x.ScrawlMaxSize != nil {
		return *x.ScrawlMaxSize
	}
	return 0
}

func (x *UEditorResponse) GetScrawlUrlPrefix() string {
	if x != nil && x.ScrawlUrlPrefix != nil {
		return *x.ScrawlUrlPrefix
	}
	return ""
}

func (x *UEditorResponse) GetScrawlInsertAlign() string {
	if x != nil && x.ScrawlInsertAlign != nil {
		return *x.ScrawlInsertAlign
	}
	return ""
}

func (x *UEditorResponse) GetScrawlPathFormat() string {
	if x != nil && x.ScrawlPathFormat != nil {
		return *x.ScrawlPathFormat
	}
	return ""
}

func (x *UEditorResponse) GetSnapscreenActionName() string {
	if x != nil && x.SnapscreenActionName != nil {
		return *x.SnapscreenActionName
	}
	return ""
}

func (x *UEditorResponse) GetSnapscreenUrlPrefix() string {
	if x != nil && x.SnapscreenUrlPrefix != nil {
		return *x.SnapscreenUrlPrefix
	}
	return ""
}

func (x *UEditorResponse) GetSnapscreenInsertAlign() string {
	if x != nil && x.SnapscreenInsertAlign != nil {
		return *x.SnapscreenInsertAlign
	}
	return ""
}

func (x *UEditorResponse) GetSnapscreenPathFormat() string {
	if x != nil && x.SnapscreenPathFormat != nil {
		return *x.SnapscreenPathFormat
	}
	return ""
}

func (x *UEditorResponse) GetCatcherActionName() string {
	if x != nil && x.CatcherActionName != nil {
		return *x.CatcherActionName
	}
	return ""
}

func (x *UEditorResponse) GetCatcherFieldName() string {
	if x != nil && x.CatcherFieldName != nil {
		return *x.CatcherFieldName
	}
	return ""
}

func (x *UEditorResponse) GetCatcherLocalDomain() []string {
	if x != nil {
		return x.CatcherLocalDomain
	}
	return nil
}

func (x *UEditorResponse) GetCatcherUrlPrefix() string {
	if x != nil && x.CatcherUrlPrefix != nil {
		return *x.CatcherUrlPrefix
	}
	return ""
}

func (x *UEditorResponse) GetCatcherMaxSize() int64 {
	if x != nil && x.CatcherMaxSize != nil {
		return *x.CatcherMaxSize
	}
	return 0
}

func (x *UEditorResponse) GetCatcherAllowFiles() []string {
	if x != nil {
		return x.CatcherAllowFiles
	}
	return nil
}

func (x *UEditorResponse) GetCatcherPathFormat() string {
	if x != nil && x.CatcherPathFormat != nil {
		return *x.CatcherPathFormat
	}
	return ""
}

func (x *UEditorResponse) GetVideoActionName() string {
	if x != nil && x.VideoActionName != nil {
		return *x.VideoActionName
	}
	return ""
}

func (x *UEditorResponse) GetVideoFieldName() string {
	if x != nil && x.VideoFieldName != nil {
		return *x.VideoFieldName
	}
	return ""
}

func (x *UEditorResponse) GetVideoUrlPrefix() string {
	if x != nil && x.VideoUrlPrefix != nil {
		return *x.VideoUrlPrefix
	}
	return ""
}

func (x *UEditorResponse) GetVideoMaxSize() int64 {
	if x != nil && x.VideoMaxSize != nil {
		return *x.VideoMaxSize
	}
	return 0
}

func (x *UEditorResponse) GetVideoAllowFiles() []string {
	if x != nil {
		return x.VideoAllowFiles
	}
	return nil
}

func (x *UEditorResponse) GetVideoPathFormat() string {
	if x != nil && x.VideoPathFormat != nil {
		return *x.VideoPathFormat
	}
	return ""
}

func (x *UEditorResponse) GetFileActionName() string {
	if x != nil && x.FileActionName != nil {
		return *x.FileActionName
	}
	return ""
}

func (x *UEditorResponse) GetFileFieldName() string {
	if x != nil && x.FileFieldName != nil {
		return *x.FileFieldName
	}
	return ""
}

func (x *UEditorResponse) GetFileUrlPrefix() string {
	if x != nil && x.FileUrlPrefix != nil {
		return *x.FileUrlPrefix
	}
	return ""
}

func (x *UEditorResponse) GetFileMaxSize() int64 {
	if x != nil && x.FileMaxSize != nil {
		return *x.FileMaxSize
	}
	return 0
}

func (x *UEditorResponse) GetFileAllowFiles() []string {
	if x != nil {
		return x.FileAllowFiles
	}
	return nil
}

func (x *UEditorResponse) GetFilePathFormat() string {
	if x != nil && x.FilePathFormat != nil {
		return *x.FilePathFormat
	}
	return ""
}

func (x *UEditorResponse) GetImageManagerActionName() string {
	if x != nil && x.ImageManagerActionName != nil {
		return *x.ImageManagerActionName
	}
	return ""
}

func (x *UEditorResponse) GetImageManagerListSize() int64 {
	if x != nil && x.ImageManagerListSize != nil {
		return *x.ImageManagerListSize
	}
	return 0
}

func (x *UEditorResponse) GetImageManagerUrlPrefix() string {
	if x != nil && x.ImageManagerUrlPrefix != nil {
		return *x.ImageManagerUrlPrefix
	}
	return ""
}

func (x *UEditorResponse) GetImageManagerInsertAlign() string {
	if x != nil && x.ImageManagerInsertAlign != nil {
		return *x.ImageManagerInsertAlign
	}
	return ""
}

func (x *UEditorResponse) GetImageManagerAllowFiles() []string {
	if x != nil {
		return x.ImageManagerAllowFiles
	}
	return nil
}

func (x *UEditorResponse) GetImageManagerListPath() string {
	if x != nil && x.ImageManagerListPath != nil {
		return *x.ImageManagerListPath
	}
	return ""
}

func (x *UEditorResponse) GetFileManagerActionName() string {
	if x != nil && x.FileManagerActionName != nil {
		return *x.FileManagerActionName
	}
	return ""
}

func (x *UEditorResponse) GetFileManagerUrlPrefix() string {
	if x != nil && x.FileManagerUrlPrefix != nil {
		return *x.FileManagerUrlPrefix
	}
	return ""
}

func (x *UEditorResponse) GetFileManagerListSize() int64 {
	if x != nil && x.FileManagerListSize != nil {
		return *x.FileManagerListSize
	}
	return 0
}

func (x *UEditorResponse) GetFileManagerAllowFiles() []string {
	if x != nil {
		return x.FileManagerAllowFiles
	}
	return nil
}

func (x *UEditorResponse) GetFileManagerListPath() string {
	if x != nil && x.FileManagerListPath != nil {
		return *x.FileManagerListPath
	}
	return ""
}

func (x *UEditorResponse) GetFormulaConfig() *UEditorResponse_FormulaConfig {
	if x != nil {
		return x.FormulaConfig
	}
	return nil
}

func (x *UEditorResponse) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *UEditorResponse) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *UEditorResponse) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *UEditorResponse) GetList() []*UEditorResponse_Item {
	if x != nil {
		return x.List
	}
	return nil
}

type UEditorUploadRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Action         *string                `protobuf:"bytes,1,opt,name=action,proto3,oneof" json:"action,omitempty"`                                         // 文件名
	File           []byte                 `protobuf:"bytes,2,opt,name=file,proto3,oneof" json:"file,omitempty"`                                             // 文件内容
	SourceFileName *string                `protobuf:"bytes,3,opt,name=source_file_name,json=sourceFileName,proto3,oneof" json:"source_file_name,omitempty"` // 原文件文件名
	Mime           *string                `protobuf:"bytes,4,opt,name=mime,proto3,oneof" json:"mime,omitempty"`                                             // 文件的MIME类型
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UEditorUploadRequest) Reset() {
	*x = UEditorUploadRequest{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorUploadRequest) ProtoMessage() {}

func (x *UEditorUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorUploadRequest.ProtoReflect.Descriptor instead.
func (*UEditorUploadRequest) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{2}
}

func (x *UEditorUploadRequest) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *UEditorUploadRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *UEditorUploadRequest) GetSourceFileName() string {
	if x != nil && x.SourceFileName != nil {
		return *x.SourceFileName
	}
	return ""
}

func (x *UEditorUploadRequest) GetMime() string {
	if x != nil && x.Mime != nil {
		return *x.Mime
	}
	return ""
}

type UEditorUploadResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	State         *string                       `protobuf:"bytes,1,opt,name=state,proto3,oneof" json:"state,omitempty"`       // 上传状态，上传成功时必须返回"SUCCESS"
	Url           *string                       `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`           // 返回的地址
	Title         *string                       `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`       // 新文件名
	Original      *string                       `protobuf:"bytes,4,opt,name=original,proto3,oneof" json:"original,omitempty"` // 原始文件名
	Type          *string                       `protobuf:"bytes,5,opt,name=type,proto3,oneof" json:"type,omitempty"`         // 文件类型
	Size          *int32                        `protobuf:"varint,6,opt,name=size,proto3,oneof" json:"size,omitempty"`        // 文件大小
	List          []*UEditorUploadResponse_Item `protobuf:"bytes,10,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UEditorUploadResponse) Reset() {
	*x = UEditorUploadResponse{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorUploadResponse) ProtoMessage() {}

func (x *UEditorUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorUploadResponse.ProtoReflect.Descriptor instead.
func (*UEditorUploadResponse) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{3}
}

func (x *UEditorUploadResponse) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *UEditorUploadResponse) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *UEditorUploadResponse) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UEditorUploadResponse) GetOriginal() string {
	if x != nil && x.Original != nil {
		return *x.Original
	}
	return ""
}

func (x *UEditorUploadResponse) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UEditorUploadResponse) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *UEditorUploadResponse) GetList() []*UEditorUploadResponse_Item {
	if x != nil {
		return x.List
	}
	return nil
}

type UEditorListResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	State         string                      `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Start         int32                       `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	Total         int32                       `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	List          []*UEditorListResponse_Item `protobuf:"bytes,10,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UEditorListResponse) Reset() {
	*x = UEditorListResponse{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorListResponse) ProtoMessage() {}

func (x *UEditorListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorListResponse.ProtoReflect.Descriptor instead.
func (*UEditorListResponse) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{4}
}

func (x *UEditorListResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UEditorListResponse) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *UEditorListResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UEditorListResponse) GetList() []*UEditorListResponse_Item {
	if x != nil {
		return x.List
	}
	return nil
}

type UEditorResponse_FormulaConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ImageUrlTemplate string                 `protobuf:"bytes,1,opt,name=imageUrlTemplate,proto3" json:"imageUrlTemplate,omitempty"` // 公式渲染的路径
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UEditorResponse_FormulaConfig) Reset() {
	*x = UEditorResponse_FormulaConfig{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorResponse_FormulaConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorResponse_FormulaConfig) ProtoMessage() {}

func (x *UEditorResponse_FormulaConfig) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorResponse_FormulaConfig.ProtoReflect.Descriptor instead.
func (*UEditorResponse_FormulaConfig) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{1, 0}
}

func (x *UEditorResponse_FormulaConfig) GetImageUrlTemplate() string {
	if x != nil {
		return x.ImageUrlTemplate
	}
	return ""
}

type UEditorResponse_Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UEditorResponse_Item) Reset() {
	*x = UEditorResponse_Item{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorResponse_Item) ProtoMessage() {}

func (x *UEditorResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorResponse_Item.ProtoReflect.Descriptor instead.
func (*UEditorResponse_Item) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{1, 1}
}

func (x *UEditorResponse_Item) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UEditorResponse_Item) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

type UEditorUploadResponse_Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         string                 `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`             // 上传状态，上传成功时必须返回"SUCCESS"
	Url           *string                `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`           // 返回的地址
	Title         *string                `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`       // 新文件名
	Original      *string                `protobuf:"bytes,4,opt,name=original,proto3,oneof" json:"original,omitempty"` // 原始文件名
	Type          *string                `protobuf:"bytes,5,opt,name=type,proto3,oneof" json:"type,omitempty"`         // 文件类型
	Size          *int32                 `protobuf:"varint,6,opt,name=size,proto3,oneof" json:"size,omitempty"`        // 文件大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UEditorUploadResponse_Item) Reset() {
	*x = UEditorUploadResponse_Item{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorUploadResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorUploadResponse_Item) ProtoMessage() {}

func (x *UEditorUploadResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorUploadResponse_Item.ProtoReflect.Descriptor instead.
func (*UEditorUploadResponse_Item) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{3, 0}
}

func (x *UEditorUploadResponse_Item) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UEditorUploadResponse_Item) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *UEditorUploadResponse_Item) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UEditorUploadResponse_Item) GetOriginal() string {
	if x != nil && x.Original != nil {
		return *x.Original
	}
	return ""
}

func (x *UEditorUploadResponse_Item) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *UEditorUploadResponse_Item) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type UEditorListResponse_Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Mtime         int64                  `protobuf:"varint,2,opt,name=mtime,proto3" json:"mtime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UEditorListResponse_Item) Reset() {
	*x = UEditorListResponse_Item{}
	mi := &file_file_service_v1_ueditor_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UEditorListResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UEditorListResponse_Item) ProtoMessage() {}

func (x *UEditorListResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_file_service_v1_ueditor_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UEditorListResponse_Item.ProtoReflect.Descriptor instead.
func (*UEditorListResponse_Item) Descriptor() ([]byte, []int) {
	return file_file_service_v1_ueditor_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UEditorListResponse_Item) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UEditorListResponse_Item) GetMtime() int64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

var File_file_service_v1_ueditor_proto protoreflect.FileDescriptor

var file_file_service_v1_ueditor_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6a, 0x0a, 0x0e, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa1, 0x1d, 0x0a, 0x0f,
	0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x13, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x10, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0a, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x72,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0f, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x11, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55, 0x72,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x11, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x10, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x2f, 0x0a, 0x10, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x10, 0x63, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x48, 0x15, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x11, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x11, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x19, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x1a, 0x52,
	0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1c, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x1f, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0e, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x21, 0x52, 0x16, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x22, 0x52, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x23, 0x52,
	0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x17, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x17, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x40, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25,
	0x52, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x27, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x13, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x03, 0x48, 0x28, 0x52, 0x13, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x49, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x13, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x59, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x2a, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2b, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x48, 0x2c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x2d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x45,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x2e, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x4d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x55,
	0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x55, 0x72, 0x6c, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x55, 0x72,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x9d, 0x02, 0x0a, 0x14, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06,
	0xe5, 0x8a, 0xa8, 0xe4, 0xbd, 0x9c, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x12, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe5,
	0x86, 0x85, 0xe5, 0xae, 0xb9, 0x48, 0x01, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x47, 0x15, 0x92,
	0x02, 0x12, 0xe5, 0x8e, 0x9f, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe6, 0x96, 0x87, 0xe4, 0xbb,
	0xb6, 0xe5, 0x90, 0x8d, 0x48, 0x02, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xba, 0x47, 0x16, 0x92, 0x02, 0x13, 0xe6,
	0x96, 0x87, 0xe4, 0xbb, 0xb6, 0xe7, 0x9a, 0x84, 0x4d, 0x49, 0x4d, 0x45, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x48, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x69, 0x6d, 0x65, 0x22,
	0x88, 0x04, 0x0a, 0x15, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xd2, 0x01, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x55,
	0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x1a, 0x2e, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x74,
	0x69, 0x6d, 0x65, 0x2a, 0x8c, 0x01, 0x0a, 0x0d, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x0a, 0x12, 0x0f,
	0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x0b, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x0c,
	0x12, 0x10, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x10, 0x0e, 0x32, 0xc2, 0x01, 0x0a, 0x0e, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x41, 0x50, 0x49, 0x12, 0x1f, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xc2, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x55, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3f, 0x6b, 0x72, 0x61, 0x74, 0x6f, 0x73, 0x2d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x66,
	0x69, 0x6c, 0x65, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x46, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x5c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x46, 0x69, 0x6c,
	0x65, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x3a,
	0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_file_service_v1_ueditor_proto_rawDescOnce sync.Once
	file_file_service_v1_ueditor_proto_rawDescData []byte
)

func file_file_service_v1_ueditor_proto_rawDescGZIP() []byte {
	file_file_service_v1_ueditor_proto_rawDescOnce.Do(func() {
		file_file_service_v1_ueditor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_file_service_v1_ueditor_proto_rawDesc), len(file_file_service_v1_ueditor_proto_rawDesc)))
	})
	return file_file_service_v1_ueditor_proto_rawDescData
}

var file_file_service_v1_ueditor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_file_service_v1_ueditor_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_file_service_v1_ueditor_proto_goTypes = []any{
	(UEditorAction)(0),                    // 0: file.service.v1.UEditorAction
	(*UEditorRequest)(nil),                // 1: file.service.v1.UEditorRequest
	(*UEditorResponse)(nil),               // 2: file.service.v1.UEditorResponse
	(*UEditorUploadRequest)(nil),          // 3: file.service.v1.UEditorUploadRequest
	(*UEditorUploadResponse)(nil),         // 4: file.service.v1.UEditorUploadResponse
	(*UEditorListResponse)(nil),           // 5: file.service.v1.UEditorListResponse
	(*UEditorResponse_FormulaConfig)(nil), // 6: file.service.v1.UEditorResponse.FormulaConfig
	(*UEditorResponse_Item)(nil),          // 7: file.service.v1.UEditorResponse.Item
	(*UEditorUploadResponse_Item)(nil),    // 8: file.service.v1.UEditorUploadResponse.Item
	(*UEditorListResponse_Item)(nil),      // 9: file.service.v1.UEditorListResponse.Item
}
var file_file_service_v1_ueditor_proto_depIdxs = []int32{
	6, // 0: file.service.v1.UEditorResponse.formulaConfig:type_name -> file.service.v1.UEditorResponse.FormulaConfig
	7, // 1: file.service.v1.UEditorResponse.list:type_name -> file.service.v1.UEditorResponse.Item
	8, // 2: file.service.v1.UEditorUploadResponse.list:type_name -> file.service.v1.UEditorUploadResponse.Item
	9, // 3: file.service.v1.UEditorListResponse.list:type_name -> file.service.v1.UEditorListResponse.Item
	1, // 4: file.service.v1.UEditorService.UEditorAPI:input_type -> file.service.v1.UEditorRequest
	3, // 5: file.service.v1.UEditorService.UploadFile:input_type -> file.service.v1.UEditorUploadRequest
	2, // 6: file.service.v1.UEditorService.UEditorAPI:output_type -> file.service.v1.UEditorResponse
	4, // 7: file.service.v1.UEditorService.UploadFile:output_type -> file.service.v1.UEditorUploadResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_file_service_v1_ueditor_proto_init() }
func file_file_service_v1_ueditor_proto_init() {
	if File_file_service_v1_ueditor_proto != nil {
		return
	}
	file_file_service_v1_ueditor_proto_msgTypes[1].OneofWrappers = []any{}
	file_file_service_v1_ueditor_proto_msgTypes[2].OneofWrappers = []any{}
	file_file_service_v1_ueditor_proto_msgTypes[3].OneofWrappers = []any{}
	file_file_service_v1_ueditor_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_file_service_v1_ueditor_proto_rawDesc), len(file_file_service_v1_ueditor_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_file_service_v1_ueditor_proto_goTypes,
		DependencyIndexes: file_file_service_v1_ueditor_proto_depIdxs,
		EnumInfos:         file_file_service_v1_ueditor_proto_enumTypes,
		MessageInfos:      file_file_service_v1_ueditor_proto_msgTypes,
	}.Build()
	File_file_service_v1_ueditor_proto = out.File
	file_file_service_v1_ueditor_proto_goTypes = nil
	file_file_service_v1_ueditor_proto_depIdxs = nil
}
