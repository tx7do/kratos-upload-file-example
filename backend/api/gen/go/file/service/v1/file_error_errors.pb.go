// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package servicev1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// common error
func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FileErrorReason_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

// common error
func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, FileErrorReason_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

// file upload/download errors
func IsFileNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FileErrorReason_FILE_NOT_FOUND.String() && e.Code == 404
}

// file upload/download errors
func ErrorFileNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, FileErrorReason_FILE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 413
func IsFileTooLarge(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FileErrorReason_FILE_TOO_LARGE.String() && e.Code == 413
}

// 413
func ErrorFileTooLarge(format string, args ...interface{}) *errors.Error {
	return errors.New(413, FileErrorReason_FILE_TOO_LARGE.String(), fmt.Sprintf(format, args...))
}

// 415
func IsUnsupportedFileType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FileErrorReason_UNSUPPORTED_FILE_TYPE.String() && e.Code == 415
}

// 415
func ErrorUnsupportedFileType(format string, args ...interface{}) *errors.Error {
	return errors.New(415, FileErrorReason_UNSUPPORTED_FILE_TYPE.String(), fmt.Sprintf(format, args...))
}

// 500
func IsUploadFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FileErrorReason_UPLOAD_FAILED.String() && e.Code == 500
}

// 500
func ErrorUploadFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, FileErrorReason_UPLOAD_FAILED.String(), fmt.Sprintf(format, args...))
}

// 500
func IsDownloadFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == FileErrorReason_DOWNLOAD_FAILED.String() && e.Code == 500
}

// 500
func ErrorDownloadFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, FileErrorReason_DOWNLOAD_FAILED.String(), fmt.Sprintf(format, args...))
}
